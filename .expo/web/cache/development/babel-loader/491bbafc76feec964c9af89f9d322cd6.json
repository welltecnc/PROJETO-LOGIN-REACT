{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useReducer, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { Button, CheckBox, Input, Text } from 'react-native-elements';\nimport styles from \"../style/estilo\";\nimport { TextInputMask } from 'react-native-masked-text';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Cadastro(_ref) {\n  var navigation = _ref.navigation;\n}\n\nvar _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n\nvar _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    nome = _useState4[0],\n    setNome = _useState4[1];\n\nvar _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    cpf = _useState6[0],\n    setCpf = _useState6[1];\n\nvar salvar = function salvar() {\n  if (validar()) {\n    setLoading(true);\n    var data = {\n      email: email,\n      nome: nome,\n      cpf: cpf\n    };\n  }\n\n  return _jsx(KeyboardAvoidingView, {\n    style: [styles.container, specificStyle.specificContainer],\n    keyboardVerticalOffset: 80,\n    children: _jsxs(ScrollView, {\n      style: {\n        width: \"100%\"\n      },\n      children: [_jsx(Text, {\n        h3: true,\n        children: \"Cadastra-se\"\n      }), _jsx(Input, {\n        placeholder: \"Email\",\n        onChangeText: function onChangeText(value) {\n          setEmail(value);\n        },\n        keyboardType: \"email-address\"\n      }), _jsx(Input, {\n        placeholder: \"Nome\",\n        onChangeText: function onChangeText(value) {\n          return setNome(value);\n        }\n      }), _jsx(View, {\n        style: styles.containerMask,\n        children: _jsx(TextInputMask, {\n          placeholder: \"CPF\",\n          type: 'cpf',\n          value: cpf,\n          onChangeText: function onChangeText(value) {\n            setCpf(value);\n          },\n          keyboardType: \"number-pad\",\n          returnKeyType: \"done\",\n          style: styles.maskedInput\n        })\n      }), _jsx(CheckBox, {\n        title: \"Aceito os termos de uso\",\n        checkedIcon: \"check\",\n        uncheckedIcon: \"square-o\",\n        checkedColor: \"green\",\n        uncheckedColor: \"red\",\n        checked: isSelected,\n        onPress: function onPress() {\n          return setSelected(!isSelected);\n        }\n      }), isLoading && _jsx(Text, {\n        children: \"CARREGANDO...\"\n      }), !isLoading && _jsx(Button, {\n        icon: _jsx(Icon, {\n          name: \"check\",\n          size: 15,\n          color: \"white\"\n        }),\n        title: \"Salvar\",\n        buttonStyle: specificStyle.button,\n        onPress: function onPress() {\n          return salvar();\n        }\n      })]\n    })\n  });\n};\n\nvar specificStyle = StyleSheet.create({\n  specificContainer: {\n    backgroundColor: \"#ffff00\",\n    padding: 10\n  },\n  button: {\n    width: \"100%\",\n    margintop: 10\n  }\n});","map":{"version":3,"sources":["E:/#### PROJETOS REACT/LOGIN/aula/screen/Cadastro.js"],"names":["React","useReducer","useState","Icon","Button","CheckBox","Input","Text","styles","TextInputMask","ScrollView","Cadastro","navigation","email","setEmail","nome","setNome","cpf","setCpf","salvar","validar","setLoading","data","container","specificStyle","specificContainer","width","value","containerMask","maskedInput","isSelected","setSelected","isLoading","button","StyleSheet","create","backgroundColor","padding","margintop"],"mappings":"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","sourcesContent":["import React,{useReducer, useState} from 'react';\r\nimport { Platform, StyleSheet,View } from 'react-native';\r\nimport Icon from 'react-native-vector-icons/FontAwesome';\r\nimport { Button, CheckBox, Input, Text } from 'react-native-elements';\r\nimport styles from '../style/estilo';\r\nimport {TextInputMask} from 'react-native-masked-text';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport { KeyboardAvoidingView } from 'react-native';\r\n\r\n\r\nexport default function Cadastro({navigation}){\r\n    \r\n}\r\n\r\n    const [email, setEmail]= useState(null)\r\n    const [nome, setNome]=useState(null)\r\n    const [cpf, setCpf]=useState(null)\r\n\r\n\r\n   const salvar =()=>\r\n{\r\n    if(validar()){\r\n        setLoading(true)\r\n\r\n        let data={\r\n            email:email,\r\n            nome:nome,\r\n            cpf:cpf\r\n        }\r\n}\r\n\r\n    return (\r\n\r\n        <KeyboardAvoidingView\r\n        style={[styles.container, specificStyle.specificContainer]}\r\n        keyboardVerticalOffset={80}>\r\n        <ScrollView style={{width: \"100%\"}}>\r\n        <Text h3>Cadastra-se</Text>\r\n        <Input\r\n            placeholder=\"Email\"\r\n            onChangeText={value =>{\r\n                setEmail(value)\r\n            }}\r\n            keyboardType=\"email-address\"\r\n        />       \r\n        <Input\r\n            placeholder=\"Nome\"\r\n            onChangeText={value => setNome(value)}\r\n            />  \r\n        <View style={styles.containerMask}>\r\n            <TextInputMask\r\n                placeholder=\"CPF\"\r\n                type={'cpf'}\r\n                value={cpf}\r\n                onChangeText={value =>{\r\n                    setCpf(value)\r\n\r\n                }}\r\n                keyboardType=\"number-pad\"\r\n                returnKeyType=\"done\"\r\n                style={styles.maskedInput}\r\n                /> \r\n        </View>\r\n\r\n        <CheckBox\r\n            title=\"Aceito os termos de uso\"\r\n            checkedIcon=\"check\"\r\n            uncheckedIcon=\"square-o\"\r\n            checkedColor='green'\r\n            uncheckedColor=\"red\"\r\n            checked={isSelected}\r\n            onPress={()=> setSelected(!isSelected)}\r\n            />\r\n\r\n            { isLoading &&\r\n            <Text>CARREGANDO...</Text>\r\n            }\r\n            { !isLoading &&\r\n            <Button\r\n                icon={\r\n                    <Icon\r\n                    name=\"check\"\r\n                    size={15}\r\n                    color=\"white\"\r\n                    />\r\n                }\r\n                title=\"Salvar\"\r\n                buttonStyle={specificStyle.button}\r\n                onPress={()=> salvar()}\r\n                />\r\n\r\n            }\r\n      </ScrollView>\r\n\r\n    </KeyboardAvoidingView>\r\n\r\n    );\r\n}\r\n\r\nconst specificStyle =StyleSheet.create({\r\n    specificContainer:{\r\n        backgroundColor:\"#ffff00\",\r\n        padding:10\r\n    },\r\n    button:{\r\n        width: \"100%\",\r\n        margintop:10\r\n    }\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}